/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]

#[cfg(target_os="windows")]
#[link(name = "openvr_api", kind = "static")]
extern {}

#[cfg(target_os="linux")]
#[link(name = "openvr_api")]
extern {}

#[cfg(target_os="macos")]
#[link(name = "openvr_api")]
extern {}

#[cfg(not(target_os="win32"))]
mod binding_other;
#[cfg(not(target_os="win32"))]
pub use binding_other::*;

#[cfg(target_os="win32")]
mod binding_win32;
#[cfg(target_os="win32")]
pub use binding_win32::*;

extern "C" {
    pub fn VR_InitInternal(peError: *mut EVRInitError,
        eType: EVRApplicationType) -> intptr_t;
    pub fn VR_ShutdownInternal();
    pub fn VR_IsHmdPresent() -> u8;
    pub fn VR_GetGenericInterface(pchInterfaceVersion:
            *const ::std::os::raw::c_char,
        peError: *mut EVRInitError) -> intptr_t;
    pub fn VR_IsRuntimeInstalled() -> u8;
    pub fn VR_GetVRInitErrorAsSymbol(error: EVRInitError)
        -> *const ::std::os::raw::c_char;
    pub fn VR_GetVRInitErrorAsEnglishDescription(error: EVRInitError)
        -> *const ::std::os::raw::c_char;
}